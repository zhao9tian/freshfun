<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quxin.freshfun.dao.OrderDetailsMapper">
  <resultMap id="BaseResultMap" type="com.quxin.freshfun.model.OrderDetailsPOJO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId"/>
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="order_details_id" jdbcType="VARCHAR" property="orderDetailsId" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="actual_price" jdbcType="INTEGER" property="actualPrice" />
    <result column="delivery_num" jdbcType="VARCHAR" property="deliveryNum" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="delivery_name" jdbcType="VARCHAR" property="deliveryName" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="payment_method" jdbcType="INTEGER" property="paymentMethod" />
    <result column="pay_time" jdbcType="BIGINT" property="payTime" />
    <result column="count" jdbcType="INTEGER" property="count"/>
    <result column="order_detailscol" jdbcType="VARCHAR" property="orderDetailscol" />
    <result column="comment_status" jdbcType="INTEGER" property="commentStatus"/>
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <result column="agent_id" jdbcType="BIGINT" property="agentId" />
    <result column="agent_price" jdbcType="INTEGER" property="agentPrice"/>
    <result column="fetcher_id" jdbcType="INTEGER" property="fetcherId" />
    <result column="fetcher_price" jdbcType="INTEGER" property="fetcherPrice"/>
    <result column="pay_plateform" jdbcType="INTEGER" property="payPlateform" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
    <result column="create_date" jdbcType="BIGINT" property="createDate" />
    <result column="update_date" jdbcType="BIGINT" property="updateDate" />
    <result column="delivery_name" jdbcType="VARCHAR" property="deliveryName"/>
    <result column="is_limit" jdbcType="INTEGER" property="isLimit"/>
    <result column="recive_time" jdbcType="INTEGER" property="reciveTime"/>
    <result column="delivery_time" jdbcType="BIGINT" property="deliveryTime"/>
    <result column="goods_cost" jdbcType="INTEGER" property="goodsCost"/>
    <result column="name" jdbcType="VARCHAR" property="name"/>
    <result column="tel" jdbcType="VARCHAR" property="tel"/>
    <result column="city" jdbcType="VARCHAR" property="city"/>
    <result column="address" jdbcType="VARCHAR" property="address"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
    <result column="delivery_remark" jdbcType="VARCHAR" property="deliveryRemark"/>
    <result column="extra" jdbcType="VARCHAR" property="extra"/>
    <association property="goods" column="goods_id" select="com.quxin.freshfun.dao.GoodsMapper.selectGoodsById"></association>
  </resultMap>

  <resultMap id="PayResultId" type="java.lang.Long">
    <result column="id" jdbcType="INTEGER" property="id"/>
  </resultMap>

  <resultMap id="BaseResultInfo" type="com.quxin.freshfun.model.OrderStatusInfo">
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <result column="status_counts" jdbcType="INTEGER" property="statusCounts" />
    <result column="refund_counts" jdbcType="INTEGER" property="refundCounts" />
    <result column="comment_counts" jdbcType="INTEGER" property="commentCounts" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id,user_id , order_id, order_details_id, goods_id, actual_price, delivery_num, delivery_name , address_id,
    comment_id, payment_method, pay_time, comment_status, order_status, refund_status,
    comment_status, pay_plateform, is_deleted, create_date, update_date
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from order_details
    where id = #{id,jdbcType=INTEGER}
  </select>
  <!-- 查询单个商品 -->
  <select id="selectSigleOrder" parameterType="java.lang.String" resultMap="BaseResultMap">
    select `id`,`address_id`,`goods_id`,`pay_time`,`create_date`,`update_date`,`count`,`order_status`,`actual_price`,`delivery_num`,`is_limit`,`recive_time`,`name`,`tel`,`city`,`address` from order_details where id = #{orderDetailsId} and is_deleted = 0
  </select>
  <!-- 查询代支付订单 -->
  <select id="selectPayOrder" parameterType="java.lang.String" resultMap="BaseResultMap">
    select actual_price from order_details where id = #{orderDetailsId} and is_deleted = 0 and order_status = 10
  </select>

  <!-- 根据用户编号分页查询所有订单 -->
  <select id="selectAll" resultMap="BaseResultMap">
    select `id`,`address_id`,`goods_id`,`comment_status`,`count`,`order_status`,`actual_price`,`delivery_num`,`name`,`tel`,`city`,`address`
    from order_details where user_id = #{userId} and is_deleted = 0
    order by create_date DESC
    limit #{currentPage},#{pageSize}
  </select>
  <!-- 查询待发货订单 -->
  <select id="selectAwaitDeliverOrder" resultMap="BaseResultMap">
    select id,address_id,goods_id,actual_price,count,delivery_num , is_limit,name,tel,city,address
    from order_details where user_id = #{userId} and order_status = 30 and is_deleted = 0
    order by create_date DESC
    limit #{currentPage},#{pageSize}
  </select>
  <!-- 查询待付款订单 -->
  <select id="selectPendingPaymentOrder" resultMap="BaseResultMap">
    select id,address_id,goods_id,actual_price,count,delivery_num , is_limit,name,tel,city,address
    from order_details where user_id = #{userId} and order_status = 10 and is_deleted = 0
    and  (create_date + 1440*60 - unix_timestamp(now())) <![CDATA[>]]> 0
    order by create_date DESC
    limit #{currentPage},#{pageSize}
  </select>
  <!-- 待收货 -->
  <select id="selectAwaitGoodsReceipt" resultMap="BaseResultMap">
    select id,address_id,goods_id,actual_price,count,delivery_num , is_limit,name,tel,city,address
    from order_details where user_id = #{userId} and order_status = 50 and is_deleted = 0
    order by create_date DESC
    limit #{currentPage},#{pageSize}
  </select>
  <!-- 待评价 -->
  <select id="selectAwaitComment" resultMap="BaseResultMap">
    select `id`,`address_id`,`goods_id`,`pay_time`,`create_date`,`update_date`,`actual_price`,`count`,`delivery_num`,`name`,`tel`,`city`,`address`
    from order_details
    where user_id = #{userId} and is_deleted = 0 and order_status = 70 and comment_status = 0
    order by create_date DESC
    limit #{currentPage},#{pageSize}
  </select>
  <!-- 查询退货 -->
  <select id="selectCancelOrder" resultMap="BaseResultMap">
    select `id`,`address_id`,`goods_id`,`actual_price`,`count`,`delivery_num`,`name`,`tel`,`city`,`address` ,`update_date` , `order_status`
    from order_details where user_id = #{userId} and order_status in (20,40) and is_deleted = 0
    order by update_date DESC
    limit #{currentPage},#{pageSize}
  </select>
  <!-- 删除一条订单信息 -->
  <update id="delOrder">
    update order_details set is_deleted = 1 where id = #{orderId}
  </update>
  <!-- 修改订单支付状态 -->
  <update id="updatePayStatus" parameterType="java.lang.Long" useGeneratedKeys="true" keyProperty="id">
    update order_details set order_status = 30 where id = #{orderId}
  </update>
  <!-- 确认收货 -->
  <update id="confirmGoodsReceipt" parameterType="java.lang.String">
    update order_details set order_status = 70 , recive_time = #{reciveTime} where id = #{orderId}
  </update>
  <!-- 确认收货修改账单表 -->
  <update id="updateInState" parameterType="java.lang.String">
    update user_revenue set in_state = 2  where order_id = #{orderId}
  </update>
  <!-- 确认评价 -->
  <update id="confirmGoodsComment" parameterType="java.lang.String">
    update order_details set comment_status = 1 where id = #{orderId} and comment_status = 0
  </update>
  <!-- 查询未退款订单数量 -->
  <select id="selectStatusCounts" parameterType="java.lang.Long" resultMap="BaseResultInfo">
    SELECT order_status , COUNT(id) as status_counts FROM order_details WHERE user_id=#{userId} and is_deleted = 0 GROUP BY order_status
  </select>
  <!-- 查询退款订单数量 -->
  <select id="selectRefundCounts" parameterType="java.lang.Long" resultMap="BaseResultInfo">
    select count(id) as refund_counts from order_details WHERE user_id=#{userId} and order_status in (20,40) and is_deleted = 0
  </select>
  <!--查询待评价数量-->
  <select id="selectCommentCount" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select count(id) from order_details where user_id = #{userId} and is_deleted = 0 and order_status = 70 and comment_status = 0
  </select>

  <select id="selectPayCounts" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select count(id) from order_details WHERE user_id=#{userId} and order_status = 10 and is_deleted = 0
    and (create_date + 1440*60 - unix_timestamp(now())) <![CDATA[>]]>0
  </select>


  <!-- 查询付款编号 -->
  <select id="selectPayId" parameterType="java.lang.Long" resultMap="PayResultId">
    select id from order_details where order_id = #{orderId}
  </select>
  <!-- 查询付款编号 -->
  <select id="selectPayIdByOrderDetailsId" parameterType="java.lang.String" resultMap="PayResultId">
    select id from order_details where id = #{orderId}
  </select>
  <!-- 根据订单编号修改订单详情支付状态 -->
  <update id="updateOrderDetailPayStatus">
    update order_details set order_status = 30,pay_time=#{date} where id =#{orderId}
  </update>
  <!-- 批量修改订单状态 -->
  <update id="bachUpdateOrder" parameterType="java.util.List">
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      update order_details
      <set>
        pay_time=${item.date}
      </set>
      where id = ${item.id}
    </foreach>
  </update>

  <!--查询账单需要的订单信息-->
  <select id="selectConfirmOrderInfo" parameterType="java.lang.String" resultType="com.quxin.freshfun.model.OrderDetailsPOJO">
    select `id`,`user_id` as `userId`,`agent_id` as `agentId`,`agent_price` as `agentPrice`,`fetcher_id` as `fetcherId`,`fetcher_price` as `fetcherPrice`
    from order_details where id = #{orderId} order by create_date DESC
  </select>

  <!--查询所有过14天没有确认收货订单-->
  <select id="selectUnConfirmOrder" resultMap="BaseResultMap" >
    select `id`,`user_id`,`agent_id`,`agent_price`,`fetcher_id`,`fetcher_price`
    from order_details where order_status = 50 and is_deleted = 0 and (delivery_time + 20160*60 - unix_timestamp(now())) <![CDATA[<]]> 0
    order by create_date DESC
  </select>
  <!--查询确认收货超过7天等待打款-->
  <select id="selectAwaitPayMoney" resultMap="BaseResultMap" >
    select id , agent_id , agent_price , fetcher_id , fetcher_price from order_details where order_status = 70 and is_deleted = 0 and (recive_time + 10080*60 - unix_timestamp(now())) <![CDATA[<]]> 0
    order by create_date DESC
  </select>
  <!--修改订单状态为以完成打款：100-->
  <update id="updateAlreadyPayMoney" parameterType="java.lang.Long">
    update order_details set order_status = 100 where id = #{orderId}
  </update>

  <!--订单后台接口-->
  <!--查询所有订单-->
  <select id="selectBackstageOrders" resultMap="BaseResultMap">
    select `id` as `order_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`name`,`tel`,`city`,`address`,`create_date` from order_details where is_deleted = 0 order by create_date desc limit #{currentPage},#{pageSize};
  </select>
  <!--查询所有订单数量-->
  <select id="selectBackstageOrdersCount" resultType="java.lang.Integer" >
    select count(id) from order_details where is_deleted = 0
  </select>
  <!--查询待付款-->
  <select id="selectBackstagePendingPaymentOrder" resultMap="BaseResultMap">
    select `id` as `order_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`name`,`tel`,`city`,`address`,`create_date`
    from order_details where is_deleted = 0 and order_status = 10 and (create_date + 1440*60 - unix_timestamp(now())) <![CDATA[>]]> 0
    order by create_date desc limit #{currentPage},#{pageSize}
  </select>
  <!--查询待付款数量-->
  <select id="selectBackstagePendingPaymentOrderCount" resultType="java.lang.Integer">
    select count(id) from order_details where is_deleted = 0 and order_status = 10 and  (create_date + 1440*60 - unix_timestamp(now())) <![CDATA[>]]> 0
  </select>
  <!--待发货-->
  <select id="selectBackstageAwaitDeliverOrder" resultMap="BaseResultMap">
    select `id` as `order_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`name`,`tel`,`city`,`address`,`create_date`
    from order_details where is_deleted = 0 and order_status = 30
    order by create_date desc
    limit #{currentPage},#{pageSize}
  </select>
  <!--查询代发货数量-->
  <select id="selectBackstageAwaitDeliverOrderCount" resultType="java.lang.Integer">
    select count(id) from order_details where is_deleted = 0 and order_status = 30
  </select>
  <!--待收货-->
  <select id="selectBackstageAwaitGoodsReceipt" resultMap="BaseResultMap">
    select `id` as `order_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`name`,`tel`,`city`,`address`,`create_date`
    from order_details where is_deleted = 0 and order_status = 50
    order by create_date desc
    limit #{currentPage},#{pageSize}
  </select>
  <!--查询待收货数量-->
  <select id="selectBackstageAwaitGoodsReceiptCount" resultType="java.lang.Integer">
    select count(id) from order_details where is_deleted = 0 and order_status = 50
  </select>
  <!--已完成-->
  <select id="selectFinishOrder" resultMap="BaseResultMap">
    select `id` as `order_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`name`,`tel`,`city`,`address`,`create_date`
    from order_details where is_deleted = 0 and order_status = 100
    order by create_date desc
    limit #{currentPage},#{pageSize}
  </select>
  <select id="selectFinishOrderCount" resultType="java.lang.Integer">
    select count(id) from order_details where is_deleted = 0 and order_status = 100
  </select>
  <!--查询已关闭订单-->
  <select id="selectBackstageOrderClose" resultMap="BaseResultMap">
    select `id` as `order_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`name`,`tel`,`city`,`address`,`create_date` from order_details where is_deleted = 0 and order_status = 10 and  (create_date + 1440*60 - unix_timestamp(now())) <![CDATA[<]]> 0
    order by create_date desc
    limit #{currentPage},#{pageSize}
  </select>
  <!--查询已关闭订单数量-->
  <select id="selectBackstageOrderCloseCount" resultType="java.lang.Integer">
    select count(id) from order_details where is_deleted = 0 and order_status = 10 and  (create_date + 1440*60 - unix_timestamp(now())) <![CDATA[<]]> 0
  </select>
  <!--订单发货-->
  <update id="deliverOrder" parameterType="java.util.Map">
    update order_details set delivery_num=#{deliveryNum},order_status = 50,delivery_name=#{deliveryName},delivery_time=#{deliveryTime},goods_cost=#{goodsCost},delivery_remark=#{deliveryRemark} where id = #{orderId}
  </update>
  <!--订单备注-->
  <update id="orderRemark" parameterType="java.util.Map" >
    update order_details set remark = #{remark} where id = #{orderId}
  </update>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from order_details
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.quxin.freshfun.model.OrderDetailsPOJO">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order_details (id, order_id, order_details_id,
    goods_id, actual_price, delivery_num,
    address_id, comment_id, payment_method,
    pay_time, order_status,
    refund_status, comment_status, pay_plateform,
    is_deleted, create_date, update_date, )
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{orderDetailsId,jdbcType=VARCHAR},
    #{goodsId,jdbcType=INTEGER}, #{actualPrice,jdbcType=INTEGER}, #{deliveryNum,jdbcType=VARCHAR},
    #{addressId,jdbcType=INTEGER}, #{commentId,jdbcType=INTEGER}, #{paymentMethod,jdbcType=INTEGER},
    #{payTime,jdbcType=INTEGER}, #{orderStatus,jdbcType=INTEGER},
    #{refundStatus,jdbcType=INTEGER}, #{commentStatus,jdbcType=INTEGER}, #{payPlateform,jdbcType=INTEGER},
    #{isDeleted,jdbcType=INTEGER}, #{createDate,jdbcType=INTEGER}, #{updateDate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.quxin.freshfun.model.OrderDetailsPOJO">
    insert into order_details
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
      user_id,
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderDetailsId != null">
        order_details_id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="actualPrice != null">
        actual_price,
      </if>
      <if test="deliveryNum != null">
        delivery_num,
      </if>
      <if test="addressId != null">
        address_id,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="paymentMethod != null">
        payment_method,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      count,
      <if test="commentStatus != null">
        comment_status,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
      <if test="agentId != null">
        agent_id,
      </if>
      <if test="agentPrice != null">
        agent_price,
      </if>
      <if test="fetcherId != null">
        fetcher_id,
      </if>
      <if test="fetcherPrice != null">
        fetcher_price,
      </if>
      <if test="payPlateform != null">
        pay_plateform,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="deliveryName != null">
        delivery_name,
      </if>
      <if test="isLimit != null">
        is_limit,
      </if>
      <if test="reciveTime != null">
        recive_time,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="tel != null">
        tel,
      </if>
      <if test="city != null">
        city,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="extra != null">
        extra,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=BIGINT},
      #{userId},
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderDetailsId != null">
        #{orderDetailsId,jdbcType=VARCHAR},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="actualPrice != null">
        #{actualPrice,jdbcType=INTEGER},
      </if>
      <if test="deliveryNum != null">
        #{deliveryNum,jdbcType=VARCHAR},
      </if>
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="paymentMethod != null">
        #{paymentMethod,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=INTEGER},
      </if>
        #{count},
      <if test="commentStatus != null">
        #{commentStatus},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="agentId != null">
        #{agentId,jdbcType=BIGINT},
      </if>
      <if test="agentPrice != null">
        #{agentPrice,jdbcType=INTEGER},
      </if>
      <if test="fetcherId != null">
        #{fetcherId,jdbcType=BIGINT},
      </if>
      <if test="fetcherPrice != null">
        #{fetcherPrice,jdbcType=INTEGER},
      </if>
      <if test="payPlateform != null">
        #{payPlateform,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=INTEGER},
      </if>
      <if test="deliveryName != null">
        #{delivery_name},
      </if>
      <if test="isLimit != null">
        #{is_limit},
      </if>
      <if test="reciveTime != null">
        #{recive_time},
      </if>
      <if test="name != null">
        #{name},
      </if>
      <if test="tel != null">
        #{tel},
      </if>
      <if test="city != null">
        #{city},
      </if>
      <if test="address != null">
        #{address},
      </if>
      <if test="extra != null">
        #{extra},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.quxin.freshfun.model.OrderDetailsPOJO">
    update order_details
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderDetailsId != null">
        order_details_id = #{orderDetailsId,jdbcType=VARCHAR},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="actualPrice != null">
        actual_price = #{actualPrice,jdbcType=INTEGER},
      </if>
      <if test="deliveryNum != null">
        delivery_num = #{deliveryNum,jdbcType=VARCHAR},
      </if>
      <if test="addressId != null">
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="paymentMethod != null">
        payment_method = #{paymentMethod,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=INTEGER},
      </if>
      <if test="orderDetailscol != null">
        order_detailscol = #{orderDetailscol,jdbcType=VARCHAR},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="refundStatus != null">
        refund_status = #{refundStatus,jdbcType=INTEGER},
      </if>
      <if test="commentStatus != null">
        comment_status = #{commentStatus,jdbcType=INTEGER},
      </if>
      <if test="payPlateform != null">
        pay_plateform = #{payPlateform,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=INTEGER},
      </if>
      <if test="reservedField != null">
        reserved_field = #{reservedField,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quxin.freshfun.model.OrderDetailsPOJO">
    update order_details
    set order_id = #{orderId,jdbcType=BIGINT},
    order_details_id = #{orderDetailsId,jdbcType=VARCHAR},
    goods_id = #{goodsId,jdbcType=INTEGER},
    actual_price = #{actualPrice,jdbcType=INTEGER},
    delivery_num = #{deliveryNum,jdbcType=VARCHAR},
    address_id = #{addressId,jdbcType=INTEGER},
    comment_id = #{commentId,jdbcType=INTEGER},
    payment_method = #{paymentMethod,jdbcType=INTEGER},
    pay_time = #{payTime,jdbcType=INTEGER},
    order_status = #{orderStatus,jdbcType=INTEGER},
    refund_status = #{refundStatus,jdbcType=INTEGER},
    comment_status = #{commentStatus,jdbcType=INTEGER},
    pay_plateform = #{payPlateform,jdbcType=INTEGER},
    is_deleted = #{isDeleted,jdbcType=INTEGER},
    create_date = #{createDate,jdbcType=INTEGER},
    update_date = #{updateDate,jdbcType=INTEGER},
    reserved_field = #{reservedField,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <!-- getLogistic By orderDetailId-->
  <resultMap id="LogisticRM" type="com.quxin.freshfun.model.OrderDetailsPOJO">
    <result column="delivery_num" jdbcType="VARCHAR" property="deliveryNum" />
    <result column="delivery_name" jdbcType="VARCHAR" property="deliveryName" />
    <result column="create_date" jdbcType="BIGINT" property="createDate" />
  </resultMap>
  <select id="getLogistic" parameterType="java.lang.String" resultMap="LogisticRM" >
    select delivery_num , delivery_name , create_date from order_details where id = #{orderDetailId}
  </select>
  <!--订单确认收货修改状态-->
  <update id="updateOrderStatus" parameterType="java.util.Map" >
    update order_details set order_status = 70,comment_status=0,recive_time = #{reciveTime} where id = #{orderDetailId}
  </update>

  <select id="applyRefund" parameterType="java.lang.String" resultType="java.lang.Long">
    select id from order_details where order_details_id =#{orderDetailId} and order_status = 70 and (recive_time + 7 * 24 * 3600 - UNIX_TIMESTAMP(NOW())  <![CDATA[>]]> 0 )
  </select>

  <select id="selectAllIncome" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select sum(actual_price) from order_details where goods_id in (select id from goods where merchant_proxy_id = #{id,jdbcType=BIGINT})
  </select>

  <select id="selectEarnedIncome" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select sum(actual_price) from order_details where goods_id in (select id from goods where merchant_proxy_id = #{id,jdbcType=BIGINT}) and order_status=30
  </select>

</mapper>